* Version 1.0 [5/6]
  The lib is _working_ and is performing all the major tasks.
  The api might be clunky, it might be hard to write own
  callbacks for process registors and db modules.
  NOTE: Some features implemented in this version wasn't added here.
  - [X] Tools [2/2]
    - [X] Makefile
    - [X] Unit tests
  - [-] Process and actor naming [3/5]
    - [X] Make configurable, probably with a wrapper around wactor_channel.
    - [X] Application should not start locker.
      It is up to the lib user to start and configure the locking service
    - [ ] Callback for timeout, to refresh the locks.
    - [X] Locker [2/2]
      - [X] Make primary / read copy configurable
      - [X] Make all args to locker start_link/4 configurable.
    - [ ] Write module for erlang local registry (for tests).
  - [X] Channels [2/2]
    - [X] Stop channel
    - [X] db callback per actor.
  - [X] Actors [1/1]
    - [X] How should we return from a command.
      If actor_response record use it as that, otherwise its a state.
  - [X] Storage [3/3]
    - [X] Insert hooks for read and write
    - [X] Make storage configurable
    - [X] Write module for ets (for tests).
  - [X] Timeout [1/1]
    - [X] Which way is more efficient? gen_server timeout or timer:send_after
      gen_server timeout seems to scale better with more cores.
      For a when saturating 3 cores, the difference was not so big.

* Version 1.1 [0/5]
  The lib should be _useful when prototyping_.
  It should be easy to write own callbaks.
  The api should be stable and should make sence.
  - [ ] Behaviours and types for callbacks and records [0/4]
    - [ ] Actor
    - [ ] Db
    - [ ] Locker
    - [ ] Actor response record
  - [ ] Storage
    - [ ] Write module for s3
  - [ ] API
    - [ ] Should we check if channel is runnig before each command/read?
  - [ ] Channels [0/2]
    - [ ] Introduce a channel type, channels are configured by type.
    - [ ] Actor locker callback per actor, not per channel type
  - [ ] Write a tutorial

* Version 1.2 [0/2]
  The lib contains _advanced features_ needed in GXios.
  - [ ] Channels
    - [ ] Handover of actors between channels
  - [ ] Actors
    - [ ] FSM for actors.
  - [ ] Events [0/2]
    - [ ] Actors can send events to channels before the current command is over.
    - [ ] Events to current channel is either sync or not sent as a message.

* Version 1.3 [0/1]
  The lib should be able to run is a _production ready_ system.
  - [ ] Storage
    - [ ] Circuit breaker to not overload db communication lib when db is slow.

* Future features
  This is ideas that seems far fetched now, but might be good to have in the
  back of the head.
  - [ ] Channels
    - [ ] Rate limiting requests / channels of a specific type
    - [ ] Circuit breaker for excecuting the commands
