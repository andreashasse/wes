* Version 0.1 [6/6]
  The lib is _working_ and is performing all the major tasks.
  The api might be clunky, it might be hard to write own
  callbacks for process registors and db modules.
  NOTE: Some features implemented in this version wasn't added here.
  - [X] Tools [2/2]
    - [X] Makefile
    - [X] Unit tests
  - [X] Process and actor naming [5/5]
    - [X] Make configurable, probably with a wrapper around wactor_channel.
    - [X] Application should not start locker.
      It is up to the lib user to start and configure the locking service
    - [X] Callback for timeout, to refresh the locks.
    - [X] Locker [2/2]
      - [X] Make primary / read copy configurable
      - [X] Make all args to locker start_link/4 configurable.
    - [X] Write module for ets.
  - [X] Channels [2/2]
    - [X] Stop channel
    - [X] db callback per actor.
  - [X] Actors [1/1]
    - [X] How should we return from a command.
      If actor_response record use it as that, otherwise its a state.
  - [X] Storage [3/3]
    - [X] Insert hooks for read and write
    - [X] Make storage configurable
    - [X] Write module for ets (for tests).
  - [X] Timeout [1/1]
    - [X] Which way is more efficient? gen_server timeout or timer:send_after
      gen_server timeout seems to scale better with more cores.
      For a when saturating 3 cores, the difference was not so big.

* Version 0.1.1 [2/2]
  Adding things I forgot in v0.1
  - [X] Actors
    - [X] An actor should be able to stop a channel.
    - [X] An actor can reject a command.
      This stops the channel and genrates a error message to the caller.
  - [X] Channels
    - [X] Command to a channel without actors should generate a error log.

* Verison 0.1.2 [3/3]
  Cleanup some design misstakes from 0.1
  - [X] Actor locker callback per actor, not per channel type
  - [X] Channel keeps track of each timeout and sets the next one after.
  - [X] Move actor code from _channel.erl to _actor.erl

* Version 0.1.3 [3/3]
  Things I want in the lib before deside how to do the api change for v0.2
  - [X] Monitoring
    - [X] Each message should have a name.
    - [X] Stats callback
  - [X] Cleanup
    - [X] wes_tests.erl looks like crap.
  - [X] Storage
    - [X] Write module for s3.

* Version 0.1.4 [2/2]
  Starting to settle on internal apis.
  - [X] Channels
    - [X] Introduce a channel and actor type, channels are configured by type.
      * Public configs ets table with:
        channel type, which should be sent to each call.
        actor type, for easier starting and moving of actors.
      * Generate code from the spec.
  - [X] Behaviours and types for callbacks and records [5/5]
    - [X] Actor
    - [X] Db
    - [X] Locker
    - [X] Stats
    - [X] Actor response record

* Version 0.1.5 [3/3]
  - [X] Api
    - [X] What happens when the channel starts but one of the
    starting actors can register its name?
  - [X] Cleanup
    - [X] Move channel logic to separate module to make it easier to unit test.
  - [X] Bugfix: Stop actor when no new messages within time span.

* Version 0.1.6 [2/2]
  Make it easier to use
  - [X] Don't have channel type in actor read call.
  - [X] wes_channel:ensure_actor(...)

* Version 0.1.7 [2/2]
  - [X] Actors should be anble to stop themselfs without stopping the channel.
  - [X] Nice error message when trying to read from a actor that isn't active.

* Version 0.1.8 [3/4]
  - [ ] Consume all timeouts that have expired when getting a timeout message.
  - [X] Write testcase for the message_timeout in wes_channel.
  - [X] Is it ms or seconds in the timeout handling.
  - [X] Why is the return type form register actor {ok, interger()}.

* Version 0.2 [0/5]
  The lib should be _useful when prototyping_ a wooga erlang backend.
  It should be easy to write own callbaks.
  The api should be stable and should make sence.
  - [-] Documentation
    - [ ] Write a HOWTO
    - [ ] Make a rebar template
    - [X] Make a example application
    - [X] Describe persistance and channel/actor naming better in readme.
  - [ ] Cleanup
    - [ ] Move all callbacks that introduces rebar deps to separate apps.
  - [ ] Benchmark lib to make sure the ideas work.

* Version 0.3 [0/2]
  The lib contains _advanced features_ needed in GXios.
  - [ ] Channels
    - [ ] Handover of actors between channels
  - [ ] Actors
    - [ ] Mature handling of FSM for actors.
  - [ ] Events
    - [ ] Actors can send events to channels before the current command is over.
    - [ ] Events to current channel is either sync or not sent as a message.
  - [ ] Observable?
    - [ ] Channels or actors should be observable by either channel or actors.

* Version 1.0 [0/1]
  The lib should be able to run is a _production ready_ system.
  - [ ] Storage
    - [ ] Circuit breaker to not overload db communication lib when db is slow.

* Future/unsorted features
  This is ideas that seems far fetched now, but might be good to have in the
  back of the head.
  - [ ] Don't call wes_timeout:now_milli/0 in the wes_channel timeout.
  - [ ] Event sourced actors
    Save commands/events to an actor in addition to periodically save state.
  - [ ] Channels
    - [ ] Forward events from one channel to anthoer.
      Native or as a actor that send the event along.
    - [ ] Rate limiting requests / channels of a specific type
    - [ ] Circuit breaker for excecuting the commands
